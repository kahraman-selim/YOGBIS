@using Microsoft.AspNetCore.Identity
@inject SignInManager<YOGBIS.Data.DbModels.Kullanici> SignInManager
@inject UserManager<YOGBIS.Data.DbModels.Kullanici> UserManager
@model YOGBIS.Common.VModels.AdaylarVM
@{
    ViewData["Title"] = "Adaylar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-4">
        <div class="card shadow-lg rounded-lg mb-1">
            <div class="card-header">
                <i class="fas fa-table mr-1"></i>
                <b>Aday Yükleme/Güncellme</b>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="small font-weight-bold">Yükleme dosyası için seçim yapınız</label>
                            <select id="islemTipi" class="form-control-range form-control py-0" aria-label="Yükleme tipi seçimi">
                                <option selected value="">Seçim yapınız</option>
                                <option value="1">Aday Temel Bilgileri</option>
                                <option value="2">Aday Başvuru Bilgileri</option>
                                <option value="3">Aday İletişim Bilgileri</option>
                                <option value="4">Aday MYSS Bilgileri</option>
                                <option value="5">Aday TYS Bilgileri</option>
                                <option value="6">Aday MYSS Notları</option>
                                <option value="7">Aday TYS Notları</option>
                                <option value="8">Aday Bilgileri Güncelle</option>
                            </select>
                            <span id="yuklemeTipiHata" class="text-danger" style="display: none;">Lütfen yükleme tipini seçiniz!</span>
                        </div>
                    </div>
                    <div class="col-md-12" style="display:none" id="MulakatYil">
                        <div class="form-group">
                            <label asp-for="MulakatId" class="small mb-1 font-weight-bold">Mülakat Yılı</label>
                            @Html.DropDownListFor(u => u.MulakatId, new SelectList(ViewBag.Mulakatlar,
                                     "MulakatId", "MulakatDonemi"), "Mülakatı Seç", new { @id = "MulakatListesi", @class = "form-control-range form-control py-0" })
                            <span class="text-danger" asp-validation-for="MulakatId"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <form id="uploadForm" enctype="multipart/form-data" method="post" class="form-group m-0" onsubmit="return submitForm(event)">
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <div class="form-row">
                                        <div class="col-md-12">
                                            <label>Aday Bilgilerini yüklemek için Excel Dosyası Seçin</label>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="col-md-8">
                                            <input type="file" name="file" class="form-control w-100 p-1" accept=".xlsx" required style="width:500px" />
                                        </div>
                                        <div class="col-md-4">
                                            <button type="submit" class="btn btn-primary w-100">Yükle</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        @if (TempData["Message"] != null)
        {
            <div class="alert alert-success col-md-12">
                @TempData["Message"]
            </div>
        }
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger col-md-12">
                <pre>@TempData["Error"]</pre>
            </div>
        }
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success col-md-12">
                @TempData["Success"]
            </div>
        }
        @if (TempData["Warning"] != null)
        {
            <div class="alert alert-warning col-md-12">
                @TempData["Warning"]
            </div>
        }

        <div id="progressBarContainer" style="display: none;">
            <div class="progress mb-1" role="progressbar" aria-label="İşlem durumu" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" style="width: 0%">0%</div>
            </div>
        </div>

        <div id="progressInfo" class="alert alert-info py-2 px-3" style="display: none;">
            <div>
                <span id="islemDurumu" class="text-dark text-sm">İşlem başlatılıyor...</span>
            </div>
            <div>
                <span class="text-dark text-sm">İşlenen Kayıt: </span>
                <span id="islemYapilan" class="text-dark text-sm">0</span> / <span id="toplamKayit" class="text-dark text-sm">0</span>
            </div>
            <div>
                <span class="text-dark text-sm">Tamamlanma: %</span><span id="yuzde" class="text-dark text-sm">0</span>
            </div>
        </div>

        <div id="islemSonucu" style="display: none;">
            <div id="warningAlert" class="alert alert-warning" style="display: none;"></div>
            <div id="successAlert" class="alert alert-success" style="display: none;"></div>
        </div>

        <div class="card shadow-lg rounded-lg m-0">
            <div class="card-header">
                <i class="fas fa-table mr-1"></i>
                <b>Aday Bilgileri</b>
            </div>
        </div>
        <div class="card-body bg-gradient-light">
            @await Component.InvokeAsync("AdayTemelBilgi")
        </div>
    </div>
    <div class="col-md-8">
        <div id="adayBasvuruBilgileriContainer">
            @await Component.InvokeAsync("AdayBasvuruBilgileri")
        </div>
        <div id="adayIletisimBilgileriContainer">
            @await Component.InvokeAsync("AdayIletisimBilgileri")
        </div>
        <div id="adayMYSSBilgileriContainer">
            @await Component.InvokeAsync("AdayMYSSBilgileri")
        </div>
        <div id="adayTYSBilgileriContainer">
            @await Component.InvokeAsync("AdayTYSBilgileri")
        </div>
    </div>
</div>

<!-- Aday Bilgileri Güncelleme Modal -->
<div class="modal fade" id="adayBilgileriGuncelleModal" tabindex="-1" role="dialog" aria-labelledby="adayBilgileriGuncelleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="adayBilgileriGuncelleModalLabel">Aday Bilgileri Güncelleme</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="mulakatYili">Mülakat Yılı</label>
                    <select class="form-control" id="mulakatYili" name="mulakatYili">
                        <option value="">Seçiniz...</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="adayTablosu">Güncellenecek Tablo</label>
                    <select class="form-control" id="adayTablosu" name="adayTablosu">
                        <option value="">Seçiniz...</option>
                        <option value="Adaylar">Aday Temel Bilgileri</option>
                        <option value="AdayBasvuruBilgileri">Aday Başvuru Bilgileri</option>
                        <option value="AdayIletisimBilgileri">Aday İletişim Bilgileri</option>
                        <option value="AdayMYSS">MYSS Bilgileri</option>
                        <option value="AdayTYS">TYS Bilgileri</option>
                        <option value="AdaySinavNotlar">Aday Sınav Notları</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Güncellenecek Alanlar</label>
                    <div id="alanlarContainer" class="border rounded p-3 mb-2" style="max-height: 300px; overflow-y: auto;">
                        <!-- Alanlar buraya dinamik olarak eklenecek -->
                    </div>
                    <div class="alert alert-info mt-2">
                        <i class="fas fa-info-circle"></i> Güncellemek istediğiniz alanları seçiniz, yükleme yapmak istediğiniz excel dosyası aynı kolon başlıkları içermeli ve aynı sıra ile olmalı
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="row w-100">
                    <div class="col-md-10 text-left">
                        <form id="uploadForm" enctype="multipart/form-data" method="post" class="form-group m-0" onsubmit="return submitForm(event)">
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <div class="form-row">
                                        <div class="col-md-8">
                                            <input type="file" name="file" class="form-control w-100 p-1" accept=".xlsx" required style="width:500px" />
                                        </div>
                                        <div class="col-md-4">
                                            <button type="submit" class="btn btn-primary w-100">Yükle</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="col-md-2 text-right">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.5.2/bootbox.min.js"></script>

    <script type="text/javascript">
        var progressTimer;

        // Add event listener for yuklemeTipi change
        document.getElementById('islemTipi').addEventListener('change', function() {
            var yuklemeTipi = this.value;
            var mulakatYilElement = document.getElementById("MulakatYil");

            // Hide by default
            mulakatYilElement.style.display = "none";

            // Show only if yuklemeTipi is '2'
            if (yuklemeTipi === '2' || yuklemeTipi === '3'|| yuklemeTipi === '4'|| yuklemeTipi === '5' || yuklemeTipi === '6'|| yuklemeTipi === '7') {
                mulakatYilElement.style.display = "inline";
            }
        });

        function submitForm(event) {
            event.preventDefault();

            // Seçili alanları kontrol et
            var secilenAlanlar = $('#alanlarContainer input[type="checkbox"]:checked').length;

            if (secilenAlanlar === 0) {
                bootbox.alert({
                    title: '<i class="fas fa-exclamation-triangle text-warning"></i> Uyarı',
                    message: 'Lütfen bir alan veya alanları seçiniz',
                    centerVertical: true,
                    buttons: {
                        ok: {
                            label: 'Tamam',
                            className: 'btn-primary'
                        }
                    }
                });
                return false;
            }

            // Form gönderme işlemine devam et
            var formData = new FormData(document.getElementById('uploadForm'));

            // Seçili alanları ekle
            var secilenAlanlarListesi = [];
            $('#alanlarContainer input[type="checkbox"]:checked').each(function() {
                secilenAlanlarListesi.push({
                    name: $(this).val(),
                    siraNo: $(this).data('sirano')
                });
            });

            // Mülakat yılı ve tablo adını ekle
            var mulakatYili = $('#mulakatYili').val();
            var tabloAdi = $('#adayTablosu').val();

            if (!mulakatYili || !tabloAdi) {
                bootbox.alert({
                    title: '<i class="fas fa-exclamation-triangle text-warning"></i> Uyarı',
                    message: 'Lütfen mülakat yılı ve güncellenecek tabloyu seçiniz',
                    centerVertical: true,
                    buttons: {
                        ok: {
                            label: 'Tamam',
                            className: 'btn-primary'
                        }
                    }
                });
                return false;
            }

            formData.append('secilenAlanlar', JSON.stringify(secilenAlanlarListesi));
            formData.append('mulakatYili', mulakatYili);
            formData.append('tabloAdi', tabloAdi);

            // AJAX ile form gönder
            $.ajax({
                url: '@Url.Action("DosyaYukle", "AdayTanimlama")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $('#guncelleModal').modal('hide');
                        // Sayfayı yenile
                        location.reload();
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function() {
                    toastr.error('Dosya yükleme işlemi sırasında bir hata oluştu.');
                }
            });

            return false;
        }

        function showProgress() {
            document.getElementById('progressBarContainer').style.display = 'block';
            document.getElementById('progressInfo').style.display = 'block';
            document.getElementById('islemSonucu').style.display = 'none';
            document.getElementById('islemDurumu').textContent = 'İşlem başlatılıyor...';
            document.getElementById('islemYapilan').textContent = '0';
            document.getElementById('toplamKayit').textContent = '0';
            document.getElementById('yuzde').textContent = '0';
            updateProgressBar(0, 0, 0);
            startProgressCheck();
        }

        function updateProgressBar(islemYapilan, toplamKayit, yuzde) {
            var progressBar = document.getElementById('progressBar');
            var progress = 0;

            if (toplamKayit > 0) {
                progress = yuzde; // Direkt yüzdeyi kullan
            }

            // Progress bar'ı güncelle
            requestAnimationFrame(function() {
                progressBar.style.width = progress + '%';
                progressBar.textContent = progress + '%';
                progressBar.setAttribute('aria-valuenow', progress);
            });

            // Progress durumuna göre renk değişimi
            if (progress < 25) {
                progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-danger';
            } else if (progress < 50) {
                progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-warning';
            } else if (progress < 75) {
                progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-info';
            } else {
                progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-success';
            }
        }

        function startProgressCheck() {
            if (progressTimer) {
                clearInterval(progressTimer);
            }
            progressTimer = setInterval(checkProgress, 10); // Her 10ms'de bir kontrol et
        }

        function checkProgress() {
            fetch('@Url.Action("GetProgress")')
                .then(response => response.json())
                .then(data => {
                    if (!data) return;

                    requestAnimationFrame(function() {
                        // Sayaçları güncelle
                        if (data.toplamKayit) {
                            document.getElementById('islemYapilan').textContent = data.islemYapilan;
                            document.getElementById('toplamKayit').textContent = data.toplamKayit;
                            document.getElementById('yuzde').textContent = data.yuzde;

                            // Progress bar'ı sayaçlara göre güncelle
                            updateProgressBar(data.islemYapilan, data.toplamKayit, data.yuzde);
                        }

                        // Durum mesajını güncelle
                        if (data.islemAsamasi) {
                            var durumText = '';
                            switch(data.islemAsamasi) {
                                case 'Baslatiliyor':
                                    durumText = 'İşlem başlatılıyor...';
                                    break;
                                case 'TCKontrol':
                                    durumText = 'TC Kimlik numaraları kontrol ediliyor...';
                                    break;
                                case 'KayitBasliyor':
                                    durumText = 'Kayıt işlemi başlatılıyor...';
                                    // Progress'i sıfırla
                                    updateProgressBar(0, 1, 0);
                                    break;
                                case 'Kayit':
                                    durumText = 'Kayıtlar sisteme ekleniyor...';
                                    break;
                                case 'Tamamlandi':
                                    durumText = 'İşlem tamamlandı!';
                                    clearInterval(progressTimer);

                                    var message = '';
                                    if (data.warning) {
                                        message += '<div class="alert alert-warning">' + data.warning + '</div>';
                                    }
                                    if (data.success) {
                                        message += '<div class="alert alert-success">' + data.success + '</div>';
                                    }

                                    if (message) {
                                        bootbox.dialog({
                                            title: 'İşlem Tamamlandı',
                                            message: message,
                                            centerVertical: true,
                                            closeButton: false,
                                            buttons: {
                                                ok: {
                                                    label: 'Tamam',
                                                    className: 'btn-primary',
                                                    callback: function() {
                                                        islemTamamlandi();
                                                    }
                                                }
                                            }
                                        });
                                    } else {
                                        islemTamamlandi();
                                    }
                                    break;
                            }
                            document.getElementById('islemDurumu').textContent = durumText;
                        }
                    });
                })
                .catch(error => {
                    console.error('İlerleme kontrolü sırasında hata:', error);
                });
        }

        function islemTamamlandi() {
            fetch('@Url.Action("TamamlandiOnayla")', {
                method: 'POST'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                window.location.href = '@Url.Action("Index")';
            })
            .catch(error => {
                console.error('Hata:', error);
            });
        }

        function testTC(tc) {
            alert('Tıklanan TC: ' + tc);
            console.log('Tıklanan TC:', tc);
        }

        function getAdayBasvuruBilgileri(tc) {
            console.log('TC gönderiliyor:', tc);

            $.ajax({
                url: '/AdayTanimlama/AdayBasvuruBilgileriniGetir',
                type: 'GET',
                data: { TC: tc },
                success: function (result) {
                    if (result.error) {
                        console.error('Sunucu hatası:', result.error);
                        bootbox.alert({
                            title: 'Hata',
                            message: result.error,
                            size: 'small'
                        });
                        return;
                    }
                    if (result === '') {
                        $('#adayBasvuruBilgileriContainer').html('<div class="card mb-3"><div class="card-header"><i class="fas fa-table mr-1"></i><b>Aday Başvuru Bilgileri</b></div><div class="card-body"><div class="table-responsive"><table class="table table-bordered"><tbody><tr><td class="text-center">Herhangi bir kayıt bulunamadı!</td></tr></tbody></table></div></div></div>');
                        return;
                    }
                    console.log('Başarılı sonuç:', result);
                    $('#adayBasvuruBilgileriContainer').html(result);
                },
                error: function (xhr, status, error) {
                    console.group('AJAX Hata Detayları');
                    console.error('Hata:', error);
                    console.error('Status:', status);
                    console.error('Status Code:', xhr.status);
                    console.error('Response Text:', xhr.responseText);
                    try {
                        var jsonResponse = JSON.parse(xhr.responseText);
                        console.error('JSON Response:', jsonResponse);
                        bootbox.alert({
                            title: 'Hata',
                            message: jsonResponse.error || 'Veri getirme hatası',
                            size: 'small'
                        });
                    } catch (e) {
                        console.error('Raw Response:', xhr.responseText);
                        bootbox.alert({
                            title: 'Hata',
                            message: 'Veri getirme hatası',
                            size: 'small'
                        });
                    }
                    console.groupEnd();
                }
            });
        }

        function getAdayIletisimBilgileri(tc) {
            console.log('TC gönderiliyor:', tc);

            $.ajax({
                url: '/AdayTanimlama/AdayIletisimBilgileriniGetir',
                type: 'GET',
                data: { TC: tc },
                success: function (result) {
                    if (result.error) {
                        console.error('Sunucu hatası:', result.error);
                        bootbox.alert({
                            title: 'Hata',
                            message: result.error,
                            size: 'small'
                        });
                        return;
                    }
                    console.log('Başarılı sonuç:', result);
                    $('#adayIletisimBilgileriContainer').html(result);
                },
                error: function (xhr, status, error) {
                    console.group('AJAX Hata Detayları');
                    console.error('Hata:', error);
                    console.error('Status:', status);
                    console.error('Status Code:', xhr.status);
                    console.error('Response Text:', xhr.responseText);
                    try {
                        var jsonResponse = JSON.parse(xhr.responseText);
                        console.error('JSON Response:', jsonResponse);
                        bootbox.alert({
                            title: 'Hata',
                            message: jsonResponse.error || 'Veri getirme hatası',
                            size: 'small'
                        });
                    } catch (e) {
                        console.error('Raw Response:', xhr.responseText);
                        bootbox.alert({
                            title: 'Hata',
                            message: 'Veri getirme hatası',
                            size: 'small'
                        });
                    }
                    console.groupEnd();
                }
            });
         }

        function getAdayMYSSBilgileri(tc) {
            console.log('TC gönderiliyor:', tc);

            $.ajax({
                url: '/AdayTanimlama/AdayMYSSBilgileriniGetir',
                type: 'GET',
                data: { TC: tc },
                success: function (result) {
                    if (result.error) {
                        console.error('Sunucu hatası:', result.error);
                        bootbox.alert({
                            title: 'Hata',
                            message: result.error,
                            size: 'small'
                        });
                        return;
                    }
                    console.log('Başarılı sonuç:', result);
                    $('#adayMYSSBilgileriContainer').html(result);
                },
                error: function (xhr, status, error) {
                    console.group('AJAX Hata Detayları');
                    console.error('Hata:', error);
                    console.error('Status:', status);
                    console.error('Status Code:', xhr.status);
                    console.error('Response Text:', xhr.responseText);
                    try {
                        var jsonResponse = JSON.parse(xhr.responseText);
                        console.error('JSON Response:', jsonResponse);
                        bootbox.alert({
                            title: 'Hata',
                            message: jsonResponse.error || 'Veri getirme hatası',
                            size: 'small'
                        });
                    } catch (e) {
                        console.error('Raw Response:', xhr.responseText);
                        bootbox.alert({
                            title: 'Hata',
                            message: 'Veri getirme hatası',
                            size: 'small'
                        });
                    }
                    console.groupEnd();
                }
            });
         }

        function getAdayTYSBilgileri(tc) {
            console.log('TC gönderiliyor:', tc);

            $.ajax({
                url: '/AdayTanimlama/AdayTYSBilgileriniGetir',
                type: 'GET',
                data: { TC: tc },
                success: function (result) {
                    if (result.error) {
                        console.error('Sunucu hatası:', result.error);
                        bootbox.alert({
                            title: 'Hata',
                            message: result.error,
                            size: 'small'
                        });
                        return;
                    }
                    console.log('Başarılı sonuç:', result);
                    $('#adayTYSBilgileriContainer').html(result);
                },
                error: function (xhr, status, error) {
                    console.group('AJAX Hata Detayları');
                    console.error('Hata:', error);
                    console.error('Status:', status);
                    console.error('Status Code:', xhr.status);
                    console.error('Response Text:', xhr.responseText);
                    try {
                        var jsonResponse = JSON.parse(xhr.responseText);
                        console.error('JSON Response:', jsonResponse);
                        bootbox.alert({
                            title: 'Hata',
                            message: jsonResponse.error || 'Veri getirme hatası',
                            size: 'small'
                        });
                    } catch (e) {
                        console.error('Raw Response:', xhr.responseText);
                        bootbox.alert({
                            title: 'Hata',
                            message: 'Veri getirme hatası',
                            size: 'small'
                        });
                    }
                    console.groupEnd();
                }
            });
         }

    </script>

    <script>
        $(document).ready(function () {
            // İşlem tipine göre modal açma
            $('#islemTipi').change(function () {
                var selectedValue = $(this).val();
                if (selectedValue === '8') {
                    getMulakatYillari();
                    $('#adayBilgileriGuncelleModal').modal('show');
                }
            });

            // Mülakat yıllarını getir
            function getMulakatYillari() {
                $.ajax({
                    url: '@Url.Action("GetMulakatYillari", "AdayTanimlama")',
                    type: 'GET',
                    success: function (data) {
                        var select = $('#mulakatYili');
                        select.empty();
                        select.append($('<option>', {
                            value: '',
                            text: 'Seçiniz...'
                        }));
                        $.each(data, function (index, item) {
                            select.append($('<option>', {
                                value: item,
                                text: item
                            }));
                        });
                    },
                    error: function () {
                        toastr.error('Mülakat yılları getirilirken bir hata oluştu.');
                    }
                });
            }

            // Tablo seçildiğinde alanları getir
            $('#adayTablosu').change(function() {
                var tabloAdi = $(this).val();
                if (tabloAdi) {
                    getTabloAlanlari(tabloAdi);
                } else {
                    $('#alanlarContainer').empty();
                }
            });

            // Tablo alanlarını getir
            function getTabloAlanlari(tabloAdi) {
                $.ajax({
                    url: '@Url.Action("GetTabloAlanlari", "AdayTanimlama")',
                    type: 'GET',
                    data: { tabloAdi: tabloAdi },
                    success: function (data) {
                        var container = $('#alanlarContainer');
                        container.empty();

                        // Her alan için checkbox oluştur
                        data.forEach(function(alan) {
                            var div = $('<div>', {
                                class: 'custom-control custom-checkbox mb-2'
                            });

                            var checkbox = $('<input>', {
                                type: 'checkbox',
                                class: 'custom-control-input',
                                id: 'alan_' + alan.name,
                                value: alan.name,
                                'data-sirano': alan.siraNo
                            });

                            var label = $('<label>', {
                                class: 'custom-control-label',
                                for: 'alan_' + alan.name,
                                text: alan.siraNo + '. ' + alan.name
                            });

                            div.append(checkbox).append(label);
                            container.append(div);
                        });
                    },
                    error: function () {
                        toastr.error('Tablo alanları getirilirken bir hata oluştu.');
                    }
                });
            }

            // Modal kapandığında select'leri ve alanları temizle
            $('#adayBilgileriGuncelleModal').on('hidden.bs.modal', function () {
                $('#mulakatYili').val('');
                $('#adayTablosu').val('');
                $('#alanlarContainer').empty();
            });

            // Güncelle butonuna tıklandığında
            $('#btnGuncelle').click(function () {
                var mulakatYili = $('#mulakatYili').val();
                var adayTablosu = $('#adayTablosu').val();
                var secilenAlanlar = [];

                // Seçili alanları topla
                $('#alanlarContainer input[type="checkbox"]:checked').each(function() {
                    secilenAlanlar.push($(this).val());
                });

                if (!mulakatYili || !adayTablosu) {
                    toastr.warning('Lütfen mülakat yılı ve tablo seçiniz.');
                    return;
                }

                if (secilenAlanlar.length === 0) {
                    toastr.warning('Lütfen en az bir alan seçiniz.');
                    return;
                }

                // TODO: Güncelleme işlemi için gerekli endpoint'e istek atılacak
                toastr.info('Güncelleme işlemi başlatılıyor...');
                console.log('Seçilen alanlar:', secilenAlanlar);
            });
        });
    </script>
}